name: Registry

on:
  release:
    types: [published]
  workflow_dispatch:
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ${{ vars.REGISTRY_ADDRESS }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_ADDRESS }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY_ADDRESS }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
  
      - name: Sign image with a key
        shell: bash
        run: |
            IFS=' ' read -r -a tags_array <<< "${TAGS}"
            images=""
            for tag in "${tags_array[@]}"; do
              images+="${tag}@${DIGEST} "
            done
            echo "images set as ${images}"
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}

      - name: Checkout Deployment Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.DEPLOY_REPOSITORY }}
          token: ${{ secrets.CI_TOKEN }}
          path: deployment

      - name: Extract and Set New Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Update the kustomization.yml file
        run: |
          cd ./deployment
          sed -i "s|image: ${{ env.IMAGE_NAME }}:.*|image: ${{ env.RELEASE_VERSION }}|" ${{ env.SUB_DIR }}
          if ! git diff --quiet; then
            git config --global user.name ${{ github.repository_owner }}
            git config --global user.email '${{ secrets.EMAIL }}'
            git add ${{ env.SUB_DIR }}
            git commit -m "updates ${{ env.IMAGE_NAME }} tag to ${{ env.RELEASE_VERSION }}"
            git push
            echo "updated version: ${{ env.RELEASE_VERSION }}"
          fi
        env:
          IMAGE_NAME: ${{ vars.REGISTRY_ADDRESS }}/${{ github.repository }}
          SUB_DIR: ${{ secrets.DEPLOYMENT_SUBDIRECTORY }}
